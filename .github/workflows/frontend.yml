name: Frontend CI

on:
  push:
    paths:
      - "frontend/**"
      - ".github/workflows/frontend.yml"
  workflow_dispatch:

env:
  node-version: 16.x
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  eslint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v3

      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
          cache: 'yarn'
          cache-dependency-path: 'frontend/yarn.lock'

      - name: Install packages
        run: make install

      - name: Lint
        run: yarn run lint:ci

  prettier:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v3

      - name: Run Prettier
        run: npx prettier@2.0.5 --single-quote --check 'src/**/*.{js,jsx,ts,tsx,css,scss}' --config=package.json


  i18n:
    name: i18n sync
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout codebase
        uses: actions/checkout@v3

      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
          cache: 'yarn'
          cache-dependency-path: 'frontend/yarn.lock'

      - name: Install packages
        run: make install

      - name: Test i18n sync
        run: make i18n-ci

  unit:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v3

      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
          cache: 'yarn'
          cache-dependency-path: 'frontend/yarn.lock'

      - name: Install packages
        run: make install

      - name: Test
        run: make test

  release:
    runs-on: ubuntu-latest
    needs: [eslint, prettier, i18n, unit]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # labels: |
          #   org.label-schema.docker.cmd=docker run -d -p 3000:3000 ${{ env.IMAGE_NAME }}
          # tags: |
          #   type=ref,event=branch
          #   type=sha
          #   type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          platforms: linux/amd64
          context: frontend/
          file: frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}